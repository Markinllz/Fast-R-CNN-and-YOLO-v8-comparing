import hydra
from omegaconf import DictConfig, OmegaConf
import mlflow
from pathlib import Path
from utils.logger import logger
from ultralytics import YOLO
import yaml
import os


class YOLOv8Trainer:
    def __init__(self, cfg: DictConfig):
        self.cfg = cfg
        self.logger = logger
        self.model = None
 
        self._setup_mlflow()

    def _setup_mlflow(self):

        mlflow.set_tracking_uri("file:./mlruns")
        self.logger.info("‚úÖ MLFlow –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è YOLOv8")

    def _create_dataset_yaml(self):
       
        
  
        dataset_root = "/Users/bagdasaryanproduction/Eye Segmentation/Dataset"
       
        train_images = Path(dataset_root) / "train" / "images"
        val_images = Path(dataset_root) / "val" / "images"
        
        if not train_images.exists():
            raise FileNotFoundError(f"Train images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {train_images}")
        if not val_images.exists():
            raise FileNotFoundError(f"Val images –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {val_images}")
        
       
        class_names = ["normal_eye", "cataract_eye"] 
        
        dataset_yaml = {
            'path': dataset_root,
            'train': 'train/images', 
            'val': 'val/images',
            'nc': len(class_names), 
            'names': class_names 
        }
        
        yaml_path = Path('dataset.yaml')
        with open(yaml_path, 'w') as f:
            yaml.dump(dataset_yaml, f, default_flow_style=False, allow_unicode=True)
        
        self.logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω dataset.yaml:")
        self.logger.info(f"   üìÅ –ü—É—Ç—å: {dataset_yaml['path']}")
        self.logger.info(f"   üöÇ Train: {train_images} ({'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if train_images.exists() else '–ù–ï –ù–ê–ô–î–ï–ù'})")
        self.logger.info(f"   üîç Val: {val_images} ({'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if val_images.exists() else '–ù–ï –ù–ê–ô–î–ï–ù'})")
        self.logger.info(f"   üè∑Ô∏è  –ö–ª–∞—Å—Å—ã: {class_names}")
        self.logger.info(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–æ–≤: {len(class_names)}")
        
        return str(yaml_path)

    def setup_model(self):
        
        if self.cfg.pretrained:
          
            self.model = YOLO('yolov8n.pt')
            self.logger.info("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–∞—è YOLOv8n –º–æ–¥–µ–ª—å")
        else:
            self.model = YOLO('yolov8n.yaml')
            self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ YOLOv8n –º–æ–¥–µ–ª—å —Å –Ω—É–ª—è")

    def train(self):
       
        self.logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ YOLOv8 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–ª–∞–∑...")
        
      
        dataset_yaml = self._create_dataset_yaml()
       
        self.setup_model()
        
        
        results = self.model.train(
            data=dataset_yaml,
            epochs=self.cfg.epochs,
            imgsz=self.cfg.input_size,
            batch=self.cfg.batch_size,
            lr0=self.cfg.learning_rate,
            device='mps' if self.cfg.device == 'auto' else self.cfg.device,
            workers=self.cfg.num_workers,
            project='runs/detect',
            name='eye_detection',
            save=True,
            save_period=self.cfg.checkpoint.save_every,
            patience=self.cfg.early_stopping.patience if self.cfg.early_stopping.enabled else 0,
            verbose=True,
            
            conf=self.cfg.confidence_threshold,
            iou=self.cfg.iou_threshold,
           
            hsv_h=0.015, 
            hsv_s=0.7,    
            hsv_v=0.4,   
            degrees=0.0,   
            translate=0.1,
            scale=0.5,     
            shear=0.0,     
            perspective=0.0, 
            flipud=0.0,    
            fliplr=0.5,   
            mosaic=1.0,    
            mixup=0.0,   
        )
        
        self.logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return results

    def validate(self):
       
        if self.model is None:
            self.logger.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return None
            
        self.logger.info("üîç –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
        
        dataset_yaml = self._create_dataset_yaml()
        
        results = self.model.val(
            data=dataset_yaml,
            imgsz=self.cfg.input_size,
            batch=self.cfg.batch_size,
            device='mps' if self.cfg.device == 'auto' else self.cfg.device,
            verbose=True,
            save_json=True,
            save_hybrid=True,
        )
        
        self.logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return results

    def save_model(self, path=None):
      
        if self.model is None:
            self.logger.error("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return
            
        if path is None:
            path = "checkpoints/yolo_eye_detection_best.pt"
        
        Path(path).parent.mkdir(parents=True, exist_ok=True)
        self.model.save(path)
        self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")


@hydra.main(config_path='configs', config_name='config', version_base="1.1")
def main(cfg: DictConfig):
    logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è YOLOv8 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –≥–ª–∞–∑")
    logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    logger.info(f"   üìà –≠–ø–æ—Ö–∏: {cfg.epochs}")
    logger.info(f"   üì¶ Batch size: {cfg.batch_size}")
    logger.info(f"   üñºÔ∏è  –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {cfg.input_size}")
    
    
    trainer = YOLOv8Trainer(cfg)
    
    try:
      
        train_results = trainer.train()
        
        
        val_results = trainer.validate()
        
        trainer.save_model()
        
        logger.info("üéâ –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        
        if train_results:
            logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:")
            
            best_model_path = Path("runs/detect/eye_detection/weights/best.pt")
            if best_model_path.exists():
                logger.info(f"   üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model_path}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        raise


if __name__ == "__main__":
    main()